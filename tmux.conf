BACKGROUND="#000000"
FOREGROUND="#ffffff"
HIGHLIGHT="#3fcfff"
ACTIVITY="#a0d0f0"

# default-terminal terminal
# Set the default terminal for new windows created in this ses‐
# sion - the default value of the TERM environment variable.  For
# tmux to work correctly, this must be set to ‘screen’, ‘tmux’ or
# a derivative of them.
# NOTE: force 256 colors
set-option -g default-terminal "screen-256color"

# escape-time time
# Set the time in milliseconds for which tmux waits after an
# escape is input to determine if it is part of a function or
# meta key sequences.  The default is 500 milliseconds.
# NOTE: 0 to prevent vim mode change delays
set-option -g escape-time 0

# focus-events [on | off]
# When enabled, focus events are requested from the terminal if
# supported and passed through to applications running in tmux.
# Attached clients should be detached and attached again after
# changing this option.
set-option -g focus-events on

# base-index index
# Set the base index from which an unused index should be
# searched when a new window is created.  The default is zero.
# NOTE: start at 1 to match keyboard order
set-option -g base-index 1

# display-panes-active-colour colour
# Set the colour used by the display-panes command to show the
# indicator for the active pane.
set-option -g display-panes-active-colour "$HIGHLIGHT"

# display-panes-colour colour
# Set the colour used by the display-panes command to show the
# indicators for inactive panes.
set-option -g display-panes-colour "$FOREGROUND"

# display-time time
# Set the amount of time for which status line messages and other
# on-screen indicators are displayed.  If set to 0, messages and
# indicators are displayed until a key is pressed.  time is in
# milliseconds.
set-option -g display-time 0

# history-limit lines
# Set the maximum number of lines held in window history.  This
# setting applies only to new windows - existing window histories
# are not resized and retain the limit at the point they were
# created.
set-option -g history-limit 50000

# message-style style
# Set status line message style.  For how to specify style, see
# the STYLES section.
set-option -g message-style "fg=$BACKGROUND,bg=$HIGHLIGHT,bright"

# prefix key
# Set the key accepted as a prefix key.  In addition to the stan‐
# dard keys described under KEY BINDINGS, prefix can be set to
# the special key ‘None’ to set no prefix.
set-option -g prefix C-a

# renumber-windows [on | off]
# If on, when a window is closed in a session, automatically
# renumber the other windows in numerical order.  This respects
# the base-index option if it has been set.  If off, do not
# renumber the windows.
set-option -g renumber-windows on

# status-left string
# Display string (by default the session name) to the left of the
# status line.  string will be passed through strftime(3).  Also
# see the FORMATS and STYLES sections.
#
# For details on how the names and titles can be set see the
# NAMES AND TITLES section.
#
# Examples are:
#
#       #(sysctl vm.loadavg)
#       #[fg=yellow,bold]#(apm -l)%%#[default] [#S]
#
# The default is ‘[#S] ’.
set-option -g status-left ""

# status-right string
# Display string to the right of the status line.  By default,
# the current pane title in double quotes, the date and the time
# are shown.  As with status-left, string will be passed to
# strftime(3) and character pairs are replaced.
set-option -g status-right "[#S]"

# status-style style
# Set status line style.  For how to specify style, see the
# STYLES section.
set-option -g status-style "bg=$BACKGROUND"

# visual-activity [on | off | both]
# If on, display a message instead of sending a bell when activ‐
# ity occurs in a window for which the monitor-activity window
# option is enabled.  If set to both, a bell and a message are
# produced.
set-option -g visual-activity both

# aggressive-resize [on | off]
# Aggressively resize the chosen window.  This means that tmux
# will resize the window to the size of the smallest or largest
# session (see the window-size option) for which it is the cur‐
# rent window, rather than the session to which it is attached.
# The window may resize when the current window is changed on
# another session; this option is good for full-screen programs
# which support SIGWINCH and poor for interactive programs such
# as shells.
set-option -g aggressive-resize on

# clock-mode-colour colour
# Set clock colour.
set-option -g clock-mode-colour "$FOREGROUND"

# mode-keys [vi | emacs]
# Use vi or emacs-style key bindings in copy mode.  The default
# is emacs, unless VISUAL or EDITOR contains ‘vi’.
set-option -g mode-keys vi

# mode-style style
# Set window modes style.  For how to specify style, see the
# STYLES section.
set-option -g mode-style "bg=$HIGHLIGHT,fg=$BACKGROUND"

# pane-active-border-style style
# Set the pane border style for the currently active pane.  For
# how to specify style, see the STYLES section.  Attributes are
# ignored.
set-option -g pane-active-border-style "fg=$HIGHLIGHT"

# window-status-activity-style style
# Set status line style for windows with an activity alert.  For
# how to specify style, see the STYLES section.
set-option -g window-status-activity-style "bg=$BACKGROUND,fg=$ACTIVITY,dim"

# window-status-bell-style style
# Set status line style for windows with a bell alert.  For how
# to specify style, see the STYLES section.
set-option -g window-status-bell-style "bg=$BACKGROUND,fg=$ACTIVITY,dim"

# window-status-current-format string
# Like window-status-format, but is the format used when the win‐
# dow is the current window.
set-option -g window-status-current-format " #I:#W "

# window-status-current-style style
# Set status line style for the currently active window.  For how
# to specify style, see the STYLES section.
set-option -g window-status-current-style "bg=$HIGHLIGHT,fg=$BACKGROUND,bold"

# window-status-format string
# Set the format in which the window is displayed in the status
# line window list.  See the FORMATS and STYLES sections.
set-option -g window-status-format " #I:#W "

# window-status-last-style style
# Set status line style for the last active window.  For how to
# specify style, see the STYLES section.
set-option -g window-status-last-style "fg=$FOREGROUND,bold"

# window-status-style style
# Set status line style for a single window.  For how to specify
# style, see the STYLES section.
set-option -g window-status-style "dim"

# terminal-overrides[] string
# Allow terminal descriptions read using terminfo(5) to be over‐
# ridden.  Each entry is a colon-separated string made up of a
# terminal type pattern (matched using fnmatch(3)) and a set of
# name=value entries.
# For example, to set the ‘clear’ terminfo(5) entry to
# ‘\e[H\e[2J’ for all terminal types matching ‘rxvt*’:
#  rxvt*:clear=\e[H\e[2J
# The terminal entry value is passed through strunvis(3) before
# interpretation.
set-option -sa terminal-overrides ',alacritty:RGB'

unbind-key -a

# vanilla key bindings
bind-key Space next-layout
bind-key $     command-prompt -I "#S" "rename-session -- '%%'"
bind-key &     confirm-before -p "kill-window #W? (y/n)" kill-window
bind-key ,     command-prompt -I "#W" "rename-window -- '%%'"
bind-key 0     select-window -t :=0
bind-key 1     select-window -t :=1
bind-key 2     select-window -t :=2
bind-key 3     select-window -t :=3
bind-key 4     select-window -t :=4
bind-key 5     select-window -t :=5
bind-key 6     select-window -t :=6
bind-key 7     select-window -t :=7
bind-key 8     select-window -t :=8
bind-key 9     select-window -t :=9
bind-key :     command-prompt
bind-key \;    last-pane
bind-key ?     list-keys
bind-key L     switch-client -l
bind-key [     copy-mode
bind-key ]     paste-buffer
bind-key c     new-window
bind-key d     detach-client
bind-key l     last-window
bind-key s     choose-tree -Zs
bind-key t     clock-mode
bind-key w     choose-tree -Zw
bind-key x     confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind-key z     resize-pane -Z

# send prefix to nested tmux server
bind-key -n C-b send-prefix

# navigate windows
bind-key -r C-j select-window -t :-
bind-key -r C-k select-window -t :+

# move windows
bind-key -r C-h swap-window -d -t -1
bind-key -r C-l swap-window -d -t +1

# navigate panes
bind-key Left  select-pane -L
bind-key Down  select-pane -D
bind-key Up    select-pane -U
bind-key Right select-pane -R

# resize panes
bind-key -r M-h resize-pane -L 5
bind-key -r M-j resize-pane -D 5
bind-key -r M-k resize-pane -U 5
bind-key -r M-l resize-pane -R 5

# split panes
bind-key \\ split-window -h
bind-key |  split-window -fh
bind-key -  split-window -v
bind-key _  split-window -fv

# toggle keybindings to simplify nested session control
bind-key -n       C-F1 set-option -g prefix None \; set-option    key-table off-1 \; set-option -g status-right-style "reverse"   \; set-option -g status-right "Press C-F1 to restore control"
bind-key -T off-1 C-F1 set-option -g prefix C-a  \; set-option -u key-table       \; set-option -g status-right-style "noreverse" \; set-option -g status-right "[#S]"
bind-key -n       C-F2 set-option -g prefix None \; set-option    key-table off-2 \; set-option -g status-right-style "reverse"   \; set-option -g status-right "Press C-F2 to restore control"
bind-key -T off-2 C-F2 set-option -g prefix C-a  \; set-option -u key-table       \; set-option -g status-right-style "noreverse" \; set-option -g status-right "[#S]"
bind-key -n       C-F3 set-option -g prefix None \; set-option    key-table off-3 \; set-option -g status-right-style "reverse"   \; set-option -g status-right "Press C-F3 to restore control"
bind-key -T off-3 C-F3 set-option -g prefix C-a  \; set-option -u key-table       \; set-option -g status-right-style "noreverse" \; set-option -g status-right "[#S]"
bind-key -n       C-F4 set-option -g prefix None \; set-option    key-table off-4 \; set-option -g status-right-style "reverse"   \; set-option -g status-right "Press C-F4 to restore control"
bind-key -T off-4 C-F4 set-option -g prefix C-a  \; set-option -u key-table       \; set-option -g status-right-style "noreverse" \; set-option -g status-right "[#S]"

# use nvim for advanced copy (even when keybindings are off)
# TODO: disable all keybindings
bind-key -n       C-F7 capture-pane -b advanced-copy \; save-buffer -b advanced-copy /tmp/tmux-advanced-copy \; set-option -g status off \; new-window -e "NEOVIM_MINIMAL=1" "nvim /tmp/tmux-advanced-copy; tmux set-option -g status on"
bind-key -T off-1 C-F7 capture-pane -b advanced-copy \; save-buffer -b advanced-copy /tmp/tmux-advanced-copy \; set-option -g status off \; new-window -e "NEOVIM_MINIMAL=1" "nvim /tmp/tmux-advanced-copy; tmux set-option -g status on"
bind-key -T off-2 C-F7 capture-pane -b advanced-copy \; save-buffer -b advanced-copy /tmp/tmux-advanced-copy \; set-option -g status off \; new-window -e "NEOVIM_MINIMAL=1" "nvim /tmp/tmux-advanced-copy; tmux set-option -g status on"
bind-key -T off-3 C-F7 capture-pane -b advanced-copy \; save-buffer -b advanced-copy /tmp/tmux-advanced-copy \; set-option -g status off \; new-window -e "NEOVIM_MINIMAL=1" "nvim /tmp/tmux-advanced-copy; tmux set-option -g status on"
bind-key -T off-4 C-F7 capture-pane -b advanced-copy \; save-buffer -b advanced-copy /tmp/tmux-advanced-copy \; set-option -g status off \; new-window -e "NEOVIM_MINIMAL=1" "nvim /tmp/tmux-advanced-copy; tmux set-option -g status on"

run-shell ~/.tmux/plugins/tmux-fingers/tmux-fingers.tmux

# use tmux-fingers when keybindings are off
bind-key -n       C-F9 run-shell "~/.tmux/plugins/tmux-fingers/scripts/tmux-fingers.sh fingers-mode"
bind-key -T off-1 C-F9 run-shell "~/.tmux/plugins/tmux-fingers/scripts/tmux-fingers.sh fingers-mode"
bind-key -T off-2 C-F9 run-shell "~/.tmux/plugins/tmux-fingers/scripts/tmux-fingers.sh fingers-mode"
bind-key -T off-3 C-F9 run-shell "~/.tmux/plugins/tmux-fingers/scripts/tmux-fingers.sh fingers-mode"
bind-key -T off-4 C-F9 run-shell "~/.tmux/plugins/tmux-fingers/scripts/tmux-fingers.sh fingers-mode"
